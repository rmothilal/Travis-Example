<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
<!--     <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/> -->
    <http:request-config name="HTTP_Request_Configuration" host="${http.oauth2v2.host}" port="${http.oauth2v2.port}" basePath="${http.oauth2v2.base.path}" connectionIdleTimeout="${http.oauth2v2.timeout.connection}" responseTimeout="${http.oauth2v2.timeout}" doc:name="HTTP Request Configuration"/>
    <ee:object-store-caching-strategy name="Caching_Strategy_oauth2v2token" keyGenerationExpression="#[&quot;OAUTHTOKEN&quot;]" doc:name="Caching Strategy">
        <in-memory-store name="oauthv2token-in-memory-store" entryTTL="${OAUTH.CACHE.EXPIRE}"/>
    </ee:object-store-caching-strategy>
    <sub-flow name="get-oauth2v2tokenSubFlow">
        <logger message="get-oauth2v2tokenSubFlow::START" level="WARN" doc:name="Logger-get-oauth2v2tokenSubFlow::START"/>
    	<set-payload value="#[&quot;grant_type=client_credentials&amp;client_id=&quot;]${OAUTH.CLIENT_ID}#[&quot;&amp;client_secret=&quot;]${OAUTH.CLIENT_SECRET}#[&quot;&amp;scope=&quot;]${OAUTH.CLIENT_SCOPE}" doc:name="Set Payload"/>
    	<http:request config-ref="HTTP_Request_Configuration" path="${http.oauth2v2.token.path}" method="POST" doc:name="HTTP">
           	<http:request-builder>
                <http:header headerName="Content-Type" value="application/x-www-form-urlencoded"/>
           	</http:request-builder>
       </http:request>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <logger message="get-oauth2v2tokenSubFlow::END -- payload=#[payload]" level="WARN" doc:name="Logger-get-oauth2v2tokenSubFlow::END"/>
    </sub-flow>
    <flow name="get-oauth2v2tokenFlow">
        <quartz:inbound-endpoint jobName="OAUTH-TOKEN-GENERATION" cronExpression="${QUARTZ.OAUTH.CRON.EXPRESSION}" repeatInterval="0" startDelay="1" responseTimeout="10000" doc:name="Quartz-OAUTH-TOKEN-GENERATION">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <enricher target="#[sessionVars.OauthToken]" doc:name="Message Enricher">
            <ee:cache cachingStrategy-ref="Caching_Strategy_oauth2v2token" doc:name="Cache-OAUTH-TOKEN-GENERATION">
                <flow-ref name="get-oauth2v2tokenSubFlow" doc:name="fr.get-oauth2v2tokenSubFlow"/>
            </ee:cache>
        </enricher>
<!--         <set-payload value="grant_type=client_credentials&amp;client_id=test-api&amp;client_secret=pass1234&amp;scope=ONBOARD-GET-TERMSCONDITIONS+ONBOARD-POST-INITIATE" doc:name="Set Payload"/> -->
<!--         <set-session-variable variableName="OauthToken" value="#[payload]" doc:name="Session Variable"/> -->
    </flow>
<!--     <flow name="test-connectivitytooauthFlow1" initialState="started"> -->
<!--         <quartz:inbound-endpoint jobName="getOAuthToken" repeatInterval="0" startDelay="0" responseTimeout="10000" doc:name="Quartz"> -->
<!--             <quartz:scheduled-dispatch-job/> -->
<!--         </quartz:inbound-endpoint> -->
<!--         <logger message="STARTINGTHISGUYUP" level="INFO" doc:name="Logger"/> -->
<!--     </flow> -->
<!--     <flow name="test-connectivitytooauthFlow"> -->
<!--         <http:listener config-ref="HTTP_Listener_Configuration" path="/" doc:name="HTTP"/> -->
<!--         <logger level="INFO" doc:name="Logger"/> -->
<!--         <flow-ref name="get-oauth2v2tokenFlow" doc:name="fr.get-oauth2v2tokenFlow"/> -->
<!--         <logger level="INFO" doc:name="Logger"/> -->
<!--     </flow> -->
</mule>
